name: Release github

on:
  push:
    branches: [ main ]

jobs:

  release-github-windows:
    
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
    - name: Restore local tools
      run: dotnet tool restore
    - name: Build and publish
      run: dotnet fake build -t publishBinariesWin
    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "v0.3.2-win.x64"
        prerelease: false
        title: "v0.3.2-win.x64"
        files: |
            src/ArcCommander/config_win/config
            publish/win-x64/arc.exe

  release-github-linux:
    
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
    - name: Restore local tools
      run: dotnet tool restore
    - name: Build and publish
      run: dotnet fake build -t publishBinariesLinux
    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "v0.3.2-linux.x64"
        prerelease: false
        title: "v0.3.2-linux.x64"
        files: |
            src/ArcCommander/config_unix/config
            publish/linux-x64/arc

  release-github-macos:
    
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
    - name: Restore local tools
      run: dotnet tool restore
    - name: Build and publish
      run: dotnet fake build -t publishBinariesMac
    - name: Package, Sign and Notarize
      env: 
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_CERTIFICATE_PWD: ${{ secrets.APPLE_CERTIFICATE_PWD }}
        APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
        APPLE_DEVELOPER_PWD: ${{ secrets.APPLE_DEVELOPER_PWD }}
        HOMEBREW_NO_INSTALL_CLEANUP: 1
      run: |
        echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
        security create-keychain -p password build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p password build.keychain
        security import certificate.p12 -k build.keychain -P $APPLE_CERTIFICATE_PWD -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k password build.keychain
        security find-identity -v
        brew install mitchellh/gon/gon create-dmg
        cat <<EOF >arc.hcl
        source = [ 
          "publish/osx-x64/arc" 
        ]
        bundle_id = "org.nfdi4plants.arccommander"
        apple_id {
          username = "${APPLE_DEVELOPER_EMAIL}"
          password = "${APPLE_DEVELOPER_PWD}"
        }
        sign {
          application_identity = "Developer ID Application: Christoph Garth (SF7W7AFY92)"
          entitlements_file = "fubarbaz.plist"
        }
        dmg {
          output_path = "arcCommander.dmg"
          volume_name = "arcCommander"
        }
        zip {
          output_path = "arcCommander.zip"
        }
        EOF
        cat <<EOF > entitlements.plist
        <?yml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
          <dict>
            <key>com.apple.security.cs.allow-jit</key>
            <true/>
          </dict>
        </plist>
        EOF
        gon -log-level info arc.hcl
    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "v0.3.2-osx.x64"
        prerelease: false
        title: "v0.3.2-osx.x64"
        files: |
            src/ArcCommander/config_unix/config
            arcCommander.dmg
